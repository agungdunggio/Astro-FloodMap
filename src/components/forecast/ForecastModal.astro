---
// src/components/ForecastModal.astro
import type { KecamatanForecast } from '../../types/forecast';

export interface Props {
  aggregatedData?: Record<string, KecamatanForecast>;
  showModal?: boolean; // Tambahkan props untuk kontrol manual modal
}

const { aggregatedData = {}, showModal = false } = Astro.props;

// Client-side data storage
const clientData: Record<string, KecamatanForecast> = aggregatedData;
---

<!-- Tambahkan client:load untuk memastikan JavaScript dijalankan di sisi klien -->
<div id="forecastModal" class="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 backdrop-blur-sm" style="display: none;">
  <div class="bg-white rounded-2xl w-11/12 max-w-4xl max-h-[90vh] overflow-y-auto shadow-2xl">
    <div class="sticky top-0 z-10 flex justify-between items-center p-6 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-t-2xl text-white">
      <h4 class="text-2xl font-bold">Prakiraan Cuaca Agregat (Kota Gorontalo)</h4>
      <button id="closeModalBtn" class="text-white hover:text-red-400 transition-transform duration-300 transform hover:rotate-90">
        <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <div id="bmkgAggregatedForecastContent" class="p-6 space-y-8 overflow-y-auto max-h-[70vh]">
      <!-- Konten akan diisi oleh JavaScript -->
    </div>
  </div>
</div>

<script type="application/json" id="forecast-data-json">
  {JSON.stringify(clientData)}
</script>

<script is:inline>
  const modal = document.getElementById('forecastModal');
  const closeBtn = document.getElementById('closeModalBtn');
  const contentEl = document.getElementById('bmkgAggregatedForecastContent');

  if (!modal || !closeBtn || !contentEl) {
    console.error('Elemen modal atau komponennya tidak ditemukan:', { modal, closeBtn, contentEl });
    return;
  }

  function formatDateTime(dateTime) {
    const localDateTime = typeof dateTime === 'string' ? new Date(dateTime) : dateTime;
    const isValid = localDateTime instanceof Date && !isNaN(localDateTime.getTime());
    if (!isValid) return 'Waktu tidak valid';
    const dateStr = localDateTime.toLocaleDateString('id-ID', { day: '2-digit', month: 'short' });
    const hourStr = localDateTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' });
    return `${dateStr} ${hourStr}`;
  }

  function renderForecastData(data) {
    if (!contentEl) return;

    let htmlContent = '';
    if (!data || Object.keys(data).length === 0) {
      htmlContent = '<div class="text-center text-gray-500 text-lg italic p-8">Tidak ada data prakiraan untuk ditampilkan.</div>';
    } else {
      Object.entries(data).forEach(([kecamatanKey, dataKecamatan]) => {
        if (!dataKecamatan || !dataKecamatan.namaResmi) return;

        htmlContent += `
          <div class="bg-gray-50 rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <h5 class="text-xl font-semibold text-indigo-800 mb-4 relative">
              ${dataKecamatan.namaResmi}
              <span class="absolute bottom-0 left-0 w-12 h-1 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-full"></span>
            </h5>`;

        if (dataKecamatan.forecasts && dataKecamatan.forecasts.length > 0) {
          htmlContent += '<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">';
          dataKecamatan.forecasts.slice(0, 17).forEach((item) => {
            if (!item) return;

            const waktu = formatDateTime(item.localDateTime);
            const iconUrl = item.iconUrl || '/placeholder-icon.png';
            const weatherDesc = item.weatherDesc || 'Ikon cuaca';
            const precipitation = item.totalPrecipitation != null ? `${item.totalPrecipitation} mm` : '-';
            const temperature = item.temperature != null ? `${item.temperature}Â°C` : '-';

            htmlContent += `
              <div class="forecast-card bg-white rounded-lg p-4 shadow-md hover:shadow-lg hover:-translate-y-1 transform transition-all duration-300 border border-transparent hover:border-indigo-500">
                <div class="text-center text-indigo-700 font-semibold mb-3">${waktu}</div>
                <div class="flex justify-center mb-3">
                  <img src="${iconUrl}" alt="${weatherDesc}" class="w-14 h-14 rounded-lg shadow-sm transform hover:scale-110 transition-transform duration-300" />
                </div>
                <div class="flex justify-center gap-4 text-sm font-medium">
                  <span class="text-blue-500 flex items-center gap-1">
                    <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path d="M12 17v5M8 17v5M16 17v5" />
                    </svg>
                    ${precipitation}
                  </span>
                  <span class="text-rose-500 flex items-center gap-1">
                    <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path d="M12 3v6m0 0a3 3 0 100 6 3 3 0 000-6zm0 0H6" />
                    </svg>
                    ${temperature}
                  </span>
                </div>
              </div>`;
          });
          htmlContent += '</div>';
        } else {
          htmlContent += '<p class="text-center text-gray-500 italic">Tidak ada data prakiraan untuk kecamatan ini.</p>';
        }
        htmlContent += `</div>`;
      });
    }
    contentEl.innerHTML = htmlContent;
  }

  let initialData = {};
  try {
    const el = document.getElementById('forecast-data-json');
    if (el && el.textContent) {
      initialData = JSON.parse(el.textContent);
    }
  } catch (e) {
    console.error('Gagal memuat data awal:', e);
  }

  // Render data awal dan tampilkan modal jika ada data
  renderForecastData(initialData);
  if (initialData && Object.keys(initialData).length > 0) {
    modal.style.display = 'flex';
  }

  window.addEventListener('updateForecastData', (event) => {
    const aggregatedData = event.detail || {};
    renderForecastData(aggregatedData);
    modal.style.display = 'flex'; // Tampilkan modal saat data diperbarui
  });

  closeBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.display = 'none';
    }
  });
</script>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');

  body {
    font-family: 'Inter', sans-serif;
  }
</style>