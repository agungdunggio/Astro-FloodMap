---
// src/components/ForecastModal.astro
import type { KecamatanForecast } from '../../types/forecast';

export interface Props {
  aggregatedData?: Record<string, KecamatanForecast>;
}

const { aggregatedData = {} } = Astro.props;

// Client-side data storage
const clientData: Record<string, KecamatanForecast> = aggregatedData;
---

<div id="forecastModal" class="modal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h4>Prakiraan Cuaca Agregat (Kota Gorontalo)</h4>
      <button id="closeModalBtn" class="close-btn" aria-label="Tutup Modal">×</button>
    </div>
    <div id="bmkgAggregatedForecastContent" class="modal-body kecamatan-scroll">
      {
        Object.keys(clientData).length > 0 ? (
          Object.entries(clientData).map(([kecamatanKey, dataKecamatan]: [string, KecamatanForecast]) => (
            <div class="kecamatan-forecast-block">
              <h5>{dataKecamatan.namaResmi}</h5>
              {
                dataKecamatan.forecasts && dataKecamatan.forecasts.length > 0 ? (
                  <div class="forecast-row">
                    {dataKecamatan.forecasts.slice(0, 17).map((item: any, idx: number) => {
                      const localDateTime = typeof item.localDateTime === 'string' ? new Date(item.localDateTime) : item.localDateTime;
                      const localTime = localDateTime instanceof Date && !isNaN(localDateTime.getTime())
                        ? localDateTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })
                        : 'Waktu tidak valid';
                      const localDate = localDateTime instanceof Date && !isNaN(localDateTime.getTime())
                        ? localDateTime.toLocaleDateString('id-ID', { day: 'numeric', month: 'short' })
                        : 'Tanggal tidak valid';
                      return (
                        <div class="forecast-card">
                          <div class="forecast-label">{idx === 0 ? 'Sekarang' : `${localDate}, ${localTime}`}</div>
                          <img
                            src={item.iconUrl || '/placeholder-icon.png'}
                            alt={item.weatherDesc || 'Ikon cuaca'}
                            class="forecast-icon"
                          />
                          <div class="forecast-desc">{item.weatherDesc || 'N/A'}</div>
                          <div class="forecast-rain">{item.totalPrecipitation != null ? `${item.totalPrecipitation} mm` : '-'}</div>
                          <div class="forecast-temp">{item.temperature != null ? `${item.temperature}°C` : '-'}</div>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p class="no-data">Tidak ada data prakiraan untuk kecamatan ini.</p>
                )
              }
            </div>
          ))
        ) : (
          <div class="loading-message">
            {clientData ? 'Tidak ada data prakiraan untuk ditampilkan.' : 'Memuat dan mengagregasi prakiraan...'}
          </div>
        )
      }
    </div>
  </div>
</div>

<script type="application/json" id="forecast-data-json">
  {JSON.stringify(aggregatedData)}
</script>
<script is:inline>
  // Ambil data dari script JSON
  let clientData = {};
  try {
    const el = document.getElementById('forecast-data-json');
    if (el && el.textContent) {
      clientData = JSON.parse(el.textContent);
    }
  } catch (e) {}

  const modal = document.getElementById('forecastModal');
  const closeBtn = document.getElementById('closeModalBtn');
  const contentEl = document.getElementById('bmkgAggregatedForecastContent');

  // Close modal
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      if (modal) modal.style.display = 'none';
    });
  }

  if (modal) {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });
  }

  // Function to render forecast data
  function renderForecastData(aggregatedData) {
    if (!contentEl) return;

    let htmlContent = '';
    if (!aggregatedData || Object.keys(aggregatedData).length === 0) {
      htmlContent = '<div class="loading-message">Tidak ada data prakiraan untuk ditampilkan.</div>';
    } else {
      for (const kecamatanKey in aggregatedData) {
        const dataKecamatan = aggregatedData[kecamatanKey];
        htmlContent += `<div class="kecamatan-forecast-block">`;
        htmlContent += `<h5>${dataKecamatan.namaResmi}</h5>`;
        if (dataKecamatan.forecasts && dataKecamatan.forecasts.length > 0) {
          htmlContent += '<div class="forecast-row">';
          dataKecamatan.forecasts.slice(0, 17).forEach((item, idx) => {
            const localDateTime = typeof item.localDateTime === 'string' ? new Date(item.localDateTime) : item.localDateTime;
            const localTime = localDateTime instanceof Date && !isNaN(localDateTime.getTime())
              ? localDateTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })
              : 'Waktu tidak valid';
            const localDate = localDateTime instanceof Date && !isNaN(localDateTime.getTime())
              ? localDateTime.toLocaleDateString('id-ID', { day: 'numeric', month: 'short' })
              : 'Tanggal tidak valid';
            htmlContent += `
              <div class="forecast-card">
                <div class="forecast-label">${idx === 0 ? 'Sekarang' : `${localDate}, ${localTime}`}</div>
                <img src="${item.iconUrl || '/placeholder-icon.png'}" alt="${item.weatherDesc || 'Ikon cuaca'}" class="forecast-icon" />
                <div class="forecast-desc">${item.weatherDesc || 'N/A'}</div>
                <div class="forecast-rain">${item.totalPrecipitation != null ? `${item.totalPrecipitation} mm` : '-'}</div>
                <div class="forecast-temp">${item.temperature != null ? `${item.temperature}°C` : '-'}</div>
              </div>`;
          });
          htmlContent += '</div>';
        } else {
          htmlContent += '<p class="no-data">Tidak ada data prakiraan untuk kecamatan ini.</p>';
        }
        htmlContent += `</div>`;
      }
    }
    contentEl.innerHTML = htmlContent;
  }

  // Listen for custom event to update forecast data
  window.addEventListener('updateForecastData', (event) => {
    const customEvent = event;
    // @ts-ignore
    const aggregatedData = customEvent.detail;
    renderForecastData(aggregatedData);
    if (modal) modal.style.display = 'flex';
  });

  // Initial render
  renderForecastData(clientData);
</script>

<style>
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(4px);
  }

  .modal-content {
    background: #ffffff;
    border-radius: 16px;
    width: 95%;
    max-width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    padding-bottom: 16px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px;
    border-bottom: 1px solid #e5e7eb;
    background: #f0f4ff;
    border-radius: 16px 16px 0 0;
  }

  .modal-header h4 {
    margin: 0;
    font-size: 1.5rem;
    color: #1e3a8a;
    font-weight: 700;
    letter-spacing: -0.02em;
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 1.8rem;
    cursor: pointer;
    color: #1e3a8a;
    font-weight: 600;
    transition: color 0.2s, transform 0.2s;
  }

  .close-btn:hover {
    color: #dc2626;
    transform: scale(1.1);
  }

  .modal-body.kecamatan-scroll {
    padding: 24px;
    max-height: 70vh;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 32px;
    scrollbar-width: thin;
    scrollbar-color: #3b82f6 #f1f5f9;
  }

  .kecamatan-forecast-block {
    background: #f8fafc;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    padding: 20px;
    transition: transform 0.2s;
  }

  .kecamatan-forecast-block:hover {
    transform: translateY(-2px);
  }

  .kecamatan-forecast-block h5 {
    margin: 0 0 16px 0;
    font-size: 1.25rem;
    color: #1e40af;
    font-weight: 600;
    letter-spacing: -0.01em;
  }

  .forecast-row {
    display: flex;
    flex-direction: row;
    overflow-x: auto;
    gap: 20px;
    padding-bottom: 12px;
    scrollbar-width: thin;
    scrollbar-color: #3b82f6 #f1f5f9;
  }

  .forecast-card {
    min-width: 100px;
    max-width: 120px;
    background: linear-gradient(145deg, #ffffff 0%, #f0f4ff 100%);
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 12px 8px;
    font-size: 0.95rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    transition: box-shadow 0.2s, transform 0.2s;
  }

  .forecast-card:hover {
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
  }

  .forecast-label {
    font-size: 0.95rem;
    font-weight: 600;
    margin-bottom: 6px;
    color: #1e3a8a;
    text-align: center;
    line-height: 1.2;
  }

  .forecast-icon {
    width: 40px;
    height: 40px;
    margin: 6px 0;
    background: transparent;
    border-radius: 8px;
  }

  .forecast-desc {
    font-size: 0.9rem;
    color: #4b5563;
    margin-bottom: 6px;
    text-align: center;
    line-height: 1.3;
    min-height: 20px;
  }

  .forecast-rain {
    color: #3b82f6;
    font-size: 0.9rem;
    font-weight: 500;
    margin: 4px 0;
  }

  .forecast-temp {
    font-size: 1.1rem;
    font-weight: 700;
    color: #111827;
    margin-top: 4px;
  }

  .no-data {
    font-size: 0.95rem;
    color: #6b7280;
    text-align: center;
    margin: 16px 0;
  }

  .loading-message {
    font-size: 1rem;
    color: #6b7280;
    text-align: center;
    padding: 24px;
  }

  @media (max-width: 600px) {
    .modal-content {
      width: 98%;
      max-height: 95vh;
    }

    .forecast-card {
      min-width: 90px;
      max-width: 100px;
    }

    .forecast-label {
      font-size: 0.85rem;
    }

    .forecast-icon {
      width: 36px;
      height: 36px;
    }

    .forecast-desc,
    .forecast-rain,
    .forecast-temp {
      font-size: 0.85rem;
    }
  }
</style>